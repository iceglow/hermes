import java.nio.charset.Charset;

import groovy.json.JsonSlurper
import javax.net.ssl.HttpsURLConnection

import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.methods.HttpPut
import org.apache.http.impl.auth.BasicScheme;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.entity.mime.content.StringBody
import org.apache.http.HttpHost;
import org.apache.http.HttpVersion
import org.apache.http.params.CoreProtocolPNames
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.HttpResponse
import org.apache.http.util.EntityUtils
import org.apache.tools.ant.filters.*

version = "0.0.4"
group = "se.su.it.handheld.app"
archivesBaseName = "hermes"
description = """Prototype of Stockholm University mobile app."""

def archiveFile = 'su.tar.gz'
def phonegapAppId = '219084'
def phonegapUser = 'utveckling@it.su.se'
def phonegapPassword = System.getenv('PG_PASS')

def phantomjs = {
  String phantomjsBin = System.getenv('PHANTOMJS')
  if (!phantomjsBin) {
    phantomjsBin = System.getenv('PHANTOMJS_HOME')
    if (phantomjsBin) phantomjsBin += "/bin/phantomjs"
  }

  if (!phantomjsBin)
    phantomjsBin = "which phantomjs".execute().text.trim()

  if (!phantomjsBin)
    throw new IllegalArgumentException("No phantomjs found! Specify phantomjs path using \$PHANTOMJS or \$PHANTOMJS_HOME")

  if ("${phantomjsBin} -v".execute().text.trim() < "1.7.0")
    throw new IllegalArgumentException("Too old version of phantomjs found! Please use version 1.7.0 or later.")

  phantomjsBin
}

apply plugin: 'saga'
apply plugin: 'js'
apply plugin: 'jslint'

/**
 * Wrapper
 */

task wrapper(type: Wrapper) {
  gradleVersion = '1.4'
}

/**
 * Coverage
 */

saga {
  baseDir = file('assets/www/')
  outputDir = file('build/reports/coverage')
  includes = '**/*spec.html'
  noInstrumentPatterns = [".*/cordova.*\\.js", ".+\\/lib\\/.+\\.js", ".+\\/spec\\/.+\\.js"]
  sourcesToPreload = "**/*.js"
}

coverage.doLast {
  "cp -v build/reports/coverage/total-coverage.dat build/reports/coverage/jsTestDriver.conf-coverage.dat".execute()
}

/**
 * Sonar integration
 */

task buildSonarPom(type: Copy) {
  from 'pom.xml.dist'
  into '.'

  rename(/(.+).dist/, '$1')
  filter(ReplaceTokens, tokens: [
          group: project.group,
          name: project.archivesBaseName,
          version: project.version,
          description: project.description
  ])
}

/**
 * JSLint
 */

jslint {
  inputDirs = ['assets/www/']
  haltOnFailure = false
  excludes = '**/cordova*.js,**/lib/**/*.js'
  options = 'rhino'
  formatterType = 'xml'
}

/**
 * Test
 */

task test(type: Exec) {
  def testExecScript = file('assets/www/spec/lib/phantom-jasmine/run_jasmine_test.coffee')
  def testRunner = file('assets/www/spec.html')

  commandLine phantomjs(), testExecScript.absolutePath, testRunner.absolutePath
}

task testReports(type: Exec) {
  def testExecScript = file('assets/www/spec/lib/jasmine-reporters/phantomjs-testrunner.js')
  def testRunner = file('assets/www/spec.html')

  commandLine phantomjs(), testExecScript.absolutePath, testRunner.absolutePath
}

/**
 * JSDoc
 */

task jsdocjs(type: com.eriwen.gradle.js.tasks.JsDocTask) {
  source = fileTree(
          dir: "${projectDir}/assets/www/",
          include: "**/*.js",
          excludes: ['**/cordova*.js', '**/lib/**/*.js']
  ).getFiles().collect { File f -> f.path; }
  destinationDir = file("${buildDir}/jsdoc")
}

/**
 * Phonegap integration
 */

task buildTar(type: Tar) {
  archiveName archiveFile
  compression Compression.GZIP
  includes['www']
  excludes = [
          'www/spec.html',
          'www/spec',
          '**/cordova*.js']
  from new File("assets/")

  eachFile { FileCopyDetails fileCopyDetails ->
    if (!fileCopyDetails.isDirectory()) {
      if (fileCopyDetails.name ==~ /.*\.html/) {
        fileCopyDetails.filter { String line ->
          line.replaceAll(/cordova-.*\.js/, 'phonegap.js')
        }
      } else if (fileCopyDetails.relativePath.pathString == "www${File.separator}config.xml") {
        fileCopyDetails.filter(ReplaceTokens, tokens: [
                id: project.group + '.' + project.archivesBaseName,
                version: project.version,
                description: project.description
        ])
      }
    }
  }
}

buildTar {
  outputs.upToDateWhen { false }
}

buildTar.doFirst {
  // Remove old zip file
  def zipFile = new File(archiveFile)
  zipFile.delete()
}



task toPhonegap(dependsOn: buildTar) {
  doLast {

    if (!phonegapPassword) {
      def console = System.console()
      if (console) {
        phonegapPassword = console.readPassword("\n> Password for ${phonegapUser}: ").toString()
      }
    }

    def host = "build.phonegap.com"
    def apiCall = "https://build.phonegap.com/api/v1/apps/${phonegapAppId}"

    DefaultHttpClient httpclient = new DefaultHttpClient();

    // -- AUTHENTICATION --
    AuthScope authScope = new AuthScope(host, 443);
    UsernamePasswordCredentials upc = new UsernamePasswordCredentials(
            phonegapUser, phonegapPassword);
    ((AbstractHttpClient) httpclient).getCredentialsProvider()
            .setCredentials(authScope, upc);
    BasicHttpContext localContext = new BasicHttpContext();
    BasicScheme basicAuth = new BasicScheme();
    localContext.setAttribute("preemptive-auth", basicAuth);
    HttpHost targetHost = new HttpHost(host, 443, "https");
    // -- AUTHENTICATION END

    // Header info
    httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
    HttpPut httpPut = new HttpPut(apiCall)
    httpPut.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true)
    httpPut.setHeader("Accept", "*/*")

    // Multipart request - one part containing info to unlock keys, one part containing app file
    MultipartEntity mp = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    StringBody stringBody = new StringBody("""{"keys":
      {"android":{"id":10672, "key_pw": "2u4ppH3rm32", "keystore_pw": "2u4ppH3rm32"},
      "ios":{"id":46818, "password": "2u4ppH3rm32"}
      }
    }""",
            "application/json", Charset.forName("utf-8"))
    mp.addPart('data', stringBody);
    FileBody fileBody = new FileBody(new File(archiveFile), "binary/octet-stream");
    mp.addPart('file', fileBody);
    httpPut.setEntity(mp); // add the two parts to the request
    // execute request
    HttpResponse response = httpclient.execute(targetHost, httpPut, localContext)

    def status = response.statusLine.statusCode
    def json = new JsonSlurper().parseText(EntityUtils.toString(response.entity))

    if (json?.error?.size() > 0) {
      throw new Exception("Error during publish to phonegap: ${json.error}")
    } else if (status != 200) {
      throw new Exception("Failed to publish to phonegap: (${json.error}) ${status}: ${response.statusLine.reasonPhrase}")
    } else {
      println "Successfully published app '${json.title}' v${json.version} build nr ${json.build_count} to phonegap."
    }
  }
}

/**
 * Config
 */

buildscript {
  repositories {
    maven {
      url = 'http://kellyrob99.github.com/Jenkins-api-tour/repository'
    }
    mavenCentral()
  }
  dependencies {
    classpath 'org.kar:gradle-jslint-plugin:0.2'
    classpath 'org.apache.httpcomponents:httpclient:4.2.1'
    classpath 'org.apache.httpcomponents:httpmime:4.2.1'
    classpath 'com.github.timurstrekalov:gradle-saga-plugin:1.3.0'
    classpath 'com.eriwen:gradle-js-plugin:1.1'
  }
}

repositories {
  mavenCentral() //needed by the plugin to retrieve the jslint jar
}
